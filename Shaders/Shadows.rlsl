/*
    The contents of this file are provided under the terms described in the accompanying License.txt file. Use of this file in any way acknowledges acceptance of these terms.
    Copyright(c) 2010 - 2017, Imagination Technologies Limited and / or its affiliated group companies. All rights reserved.
*/

float sqr(float x) { return x*x; }

void EmitShadowRay(vec3, vec3, vec3, vec4, float, float, LightmapMode, int);

vec3 CalculateJitteredLightVec(int lightIdx, vec3 lightVec, vec3 position, float maxT, vec2 rnd)
{
    int lightType = GetLightType(lightIdx);

    if (lightType == LIGHT_AREA || lightType == LIGHT_DISC)
        return lightVec;

    float lightDist = maxT;
    if(lightDist == 1e27)
        lightDist = length(GetLightPosition(lightIdx) - position);

    if(lightType == LIGHT_DIRECTIONAL)
        lightDist = 1.0;

    vec3 lightOffset = lightVec * lightDist;

    float shadowRadius = GetLightProperties1(lightIdx).x;

    vec3 b1;
    vec3 b2;

    CreateOrthoNormalBasis(lightVec, b1, b2);
    mat3 lightBasis = mat3(b1.x, b1.y, b1.z, b2.x, b2.y, b2.z, lightVec.x, lightVec.y, lightVec.z);

    return GetJitteredLightVec(shadowRadius, rnd, lightOffset, lightBasis);
}

bool DoShadowsForLight(int lightIdx, vec3 position, vec3 normal, vec3 diffuse, int target, vec2 rnd, vec3 probeDir, LightmapMode lightmapMode, bool bounce, OcclusionMode occlusionMode, vec4 lightIndices, float weight, bool receiveShadows)
{
    if (occlusionMode == OCCLUSIONMODE_DIRECT)
    {
        if (GetOutputType(target) == OUTPUTTYPE_LIGHTPROBES)
        {
            if (!GetLightProbesDoDirect(lightIdx))
                return false;
        }
        else // OUTPUTTYPE_LIGHTMAP
        {
            if (!GetLightmapsDoDirect(lightIdx))
                return false;
        }
    }

    int shadowMaskChannel;
    if (occlusionMode == OCCLUSIONMODE_SHADOWMASK)
    {
        shadowMaskChannel = GetShadowMaskChannel(lightIdx);
        if (shadowMaskChannel < 0 || shadowMaskChannel > 3)
            return false;
    }

    int probeOcclusionChannel = -1;
    if (occlusionMode == OCCLUSIONMODE_PROBEOCCLUSION)
    {
        // Check if this probe wants to calculate occlusion for this light.
        if (int(lightIndices.x) == lightIdx)
            probeOcclusionChannel = 0;
        else if (int(lightIndices.y) == lightIdx)
            probeOcclusionChannel = 1;
        else if (int(lightIndices.z) == lightIdx)
            probeOcclusionChannel = 2;
        else if (int(lightIndices.w) == lightIdx)
            probeOcclusionChannel = 3;

        if (probeOcclusionChannel == -1)
            return false;
    }

    vec3 lightColor;
    vec3 lightVec;
    float maxT;
    float shadowType = GetShadowType(lightIdx);
    bool hasHardShadows = shadowType == HARD_SHADOW;

    if (!CalculateLightColor(lightIdx, normal, position, bounce, rnd, lightColor, lightVec, maxT, occlusionMode))
        return false;

    vec4 lambdiffuse = vec4(lightColor * diffuse, 0.0);

    if (occlusionMode == OCCLUSIONMODE_SHADOWMASK)
    {
        lambdiffuse = vec4(0.0, 0.0, 0.0, 0.0);
        lambdiffuse[shadowMaskChannel] = 1.0;
    }

    if (occlusionMode == OCCLUSIONMODE_PROBEOCCLUSION)
    {
        lambdiffuse = vec4(0.0, 0.0, 0.0, 0.0);
        lambdiffuse[probeOcclusionChannel] = 1.0;
    }

    bool hasProbeDir = probeDir != vec3(0.0);

    if (shadowType == NO_SHADOW || !receiveShadows)
    {
        vec3 probeDirOut = probeDir;
        if (!hasProbeDir)
            probeDirOut = lightVec;

        Accumulate(target, lambdiffuse * weight, probeDirOut, lightmapMode);
    }
    else
    {
        lightVec = CalculateJitteredLightVec(lightIdx, lightVec, position, maxT, rnd);

        vec3 probeDirOut = probeDir;
        if (!hasProbeDir)
            probeDirOut = lightVec;

        EmitShadowRay(position, lightVec, probeDirOut, lambdiffuse, maxT, weight, lightmapMode, target);
    }

    return true;
}

bool DoShadowsForRegion(bool usePowerSampling, int regionIdx, vec3 position, vec3 normal, vec3 diffuse, int target, vec3 rnd, vec3 probeDir, LightmapMode lightmapMode, int bounce, OcclusionMode occlusionMode, vec4 lightIndices, float weight, bool receiveShadows)
{
    bool didLight = false;
    // always test directional lights
    for (int i = 0, cnt = GetMaxDirLights(); i < cnt; i++)
    {
        if (DoShadowsForLight(i, position, normal, diffuse, target, rnd.xy, probeDir, lightmapMode, bounce > 0, occlusionMode, lightIndices, weight, receiveShadows))
            didLight = true;
    }

    if (regionIdx >= Lights.GridLength || regionIdx < 0)
        return didLight;

    int numLights = GetNumLights(regionIdx);

    if(numLights <= 0)
        return didLight;


    int  maxShadowRays = max(PVR_MAX_SHADOW_RAYS - bounce + 1, 1);

    if (numLights > maxShadowRays && usePowerSampling)
    {
        float origWeight = weight / float(maxShadowRays);
        float xi = rnd.z;
        for (int i = 0; i < maxShadowRays; i++)
        {
            float rayWeight = origWeight;
            int lightIdx = PickLight(regionIdx, xi, rayWeight);
            if (lightIdx >= 0)
            {
                if (DoShadowsForLight(lightIdx, position, normal, diffuse, target, rnd.xy, probeDir, lightmapMode, bounce > 0, occlusionMode, lightIndices, rayWeight, receiveShadows))
                    didLight = true;
            }
        }
    }
    else
    {
        for (int i = 0; i < numLights; ++i)
        {
            int lightIdx = GetLightIndex(regionIdx, i);
            if (DoShadowsForLight(lightIdx, position, normal, diffuse, target, rnd.xy, probeDir, lightmapMode, bounce > 0, occlusionMode, lightIndices, weight, receiveShadows))
                didLight = true;
        }
    }

    return didLight;
}

bool DoShadows(bool usePowerSampling, vec3 surfPosition, vec3 surfNormal, vec3 surfDiffuseColor, int target, vec3 rnd, vec3 probeDir, LightmapMode lightmapMode, int bounce, OcclusionMode occlusionMode, vec4 lightIndices, float weight, bool receiveShadows)
{
    bool didLight = DoShadowsForRegion(usePowerSampling, GetRegionContaining(surfPosition), surfPosition, surfNormal, surfDiffuseColor, target, rnd, probeDir, lightmapMode, bounce, occlusionMode, lightIndices, weight, receiveShadows);
    return didLight;
}

int DoShadows(int startIndex, int count, vec3 position, vec3 normal, vec3 diffuse, int target, vec3 rnd, vec3 probeDir, LightmapMode lightmapMode, int bounce, OcclusionMode occlusionMode, vec4 lightIndices, float weight, bool receiveShadows)
{
    bool didLight;
    int maxDirLights = GetMaxDirLights();
    int remainingDir = min(max( 0, maxDirLights - startIndex), count);
    for( int cnt = startIndex + remainingDir; startIndex < cnt; startIndex++, count-- )
    {
        if (DoShadowsForLight(startIndex, position, normal, diffuse, target, rnd.xy, probeDir, lightmapMode, bounce > 0, occlusionMode, lightIndices, weight, receiveShadows))
            didLight = true;
    }
    startIndex -= maxDirLights;

    // any directional lights left?
    if (startIndex < 0)
        return 1;

    // any non-directional lights?
    int regionIdx = GetRegionContaining(position);
    if (regionIdx >= Lights.GridLength || regionIdx < 0)
        return 0;

    int numLights = GetNumLights(regionIdx);
    if (startIndex >= numLights)
        return 0;


    int remaining = min(numLights - startIndex, count);
    for( int cnt = startIndex + remaining; startIndex < cnt; startIndex++ )
    {
        int lightIdx = GetLightIndex(regionIdx, startIndex);
        if (DoShadowsForLight(lightIdx, position, normal, diffuse, target, rnd.xy, probeDir, lightmapMode, bounce > 0, occlusionMode, lightIndices, weight, receiveShadows))
            didLight = true;
    }

    return numLights - startIndex;
}
